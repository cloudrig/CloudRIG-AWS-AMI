---
AWSTemplateFormatVersion: '2010-09-09'
Description: "CloudRIG AWS AMI Factory"
Parameters:
  ProductName:
    Type: String
    Default: "cloudrig"

  InstanceType:
    Type: String
    AllowedValues: ['g2.2xlarge', 'g3s.xlarge', 'g3.4xlarge']

  ArtefactsS3BucketName:
    Type: String
    Default: "cloudrig-amifactory-artefacts"

Resources:

  #
  #
  #   IAM
  #
  #

  BuildAMIInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub "${ProductName}-amifactory-instance-profile"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  BuildAMIInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref BuildAMIInstanceRole
      InstanceProfileName: !Sub "${ProductName}-amifactory-instance-profile"

  BuildAMIAutomationServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProductName}-amifactory-automation"
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
      Policies:
        - PolicyName: PassInstanceProfileToInstances
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt ManagedInstanceRole.Arn

  #
  #
  #  SSM AUTOMATION
  #
  #

  BuildAMIUpdateSSMParamLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code: |
        from __future__ import print_function

        import json
        import boto3

        print('Loading function')


        # Updates an SSM parameter
        # Expects parameterName, parameterValue
        def lambda_handler(event, context):
            print("Received event: " + json.dumps(event, indent=2))

            # get SSM client
            client = boto3.client('ssm')

            #confirm  parameter exists before updating it
            response = client.describe_parameters(
               Filters=[
                  {
                   'Key': 'Name',
                   'Values': [ event['parameterName'] ]
                  },
                ]
            )

            if not response['Parameters']:
                print('No such parameter')
                return 'SSM parameter not found.'

            #if parameter has a Descrition field, update it PLUS the Value
            if 'Description' in response['Parameters'][0]:
                description = response['Parameters'][0]['Description']

                response = client.put_parameter(
                  Name=event['parameterName'],
                  Value=event['parameterValue'],
                  Description=description,
                  Type='String',
                  Overwrite=True
                )

            #otherwise just update Value
            else:
                response = client.put_parameter(
                  Name=event['parameterName'],
                  Value=event['parameterValue'],
                  Type='String',
                  Overwrite=True
                )

            reponseString = 'Updated parameter %s with value %s.' % (event['parameterName'], event['parameterValue'])

            return reponseString

      Description: !Sub "${ProductName} AMI build lambda used to update the SSM parameter"
      Environment:
        Environment
      FunctionName: String
      Handler: String
      KmsKeyArn: String
      Layers:
        - String
      MemorySize: Integer
      ReservedConcurrentExecutions: Integer
      Role: String
      Runtime: String
      Tags:
        - Tag
      Timeout: Integer
      TracingConfig:
        TracingConfig
      VpcConfig:
        VpcConfig

  BuildAMISSMAutomation:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: String
      Tags:
        - Key: cloudrig
          Value: true
      Content:
        schemaVersion: '0.3'
        description: CloudRIG AMI Factory - Build Microsoft Windows AMI. By default it will install
          all Windows updates, Amazon software, and Amazon drivers. It will then sysprep and create a
          new AMI. Supports Windows Server 2008 R2 and greater.
        assumeRole: "{{ AutomationAssumeRole }}"
        parameters:
          SourceAmiId:
            type: String
            description: "(Required) The source Amazon Machine Image ID."
          IamInstanceProfileName:
            type: String
            description: "(Required) The name of the role that enables Systems Manager to
              manage the instance."
            default: ManagedInstanceProfile
          AutomationAssumeRole:
            type: String
            description: "(Required) The ARN of the role that allows Automation to perform
              the actions on your behalf."
            default: arn:aws:iam::{{global:ACCOUNT_ID}}:role/AutomationServiceRole
          SubnetId:
            type: String
            description: "(Required) The subnet that the created instance will be placed into."
          TargetAmiName:
            type: String
            description: "(Optional) The name of the new AMI that will be created. Default
              is a system-generated string including the source AMI id, and the creation time
              and date."
            default: UpdateWindowsAmi_from_{{SourceAmiId}}_on_{{global:DATE_TIME}}
          InstanceType:
            type: String
            description: "(Optional) Type of instance to launch as the workspace host. Instance
              types vary by region. Default is t2.medium."
            default: t2.medium
          IncludeKbs:
            type: String
            description: "(Optional) Specify one or more Microsoft Knowledge Base (KB) article
              IDs to include. You can install multiple IDs using comma-separated values. When
              specified, the categories and security level values are ignored. Valid formats:
              KB9876543 or 9876543."
            default: ''
          ExcludeKbs:
            type: String
            description: "(Optional) Specify one or more Microsoft Knowledge Base (KB) article
              IDs to exclude. You can exclude multiple IDs using comma-separated values. When
              specified, all these KBs are excluded from install process. Valid formats: KB9876543
              or 9876543."
            default: ''
          Categories:
            type: String
            description: "(Optional) Specify one or more update categories. You can filter
              categories using comma-separated values. By default patches for all categories
              are selected. If value supplied, the update list is filtered by those values.
              Options: Critical Update, Security Update, Definition Update, Update Rollup,
              Service Pack, Tool, Update or Driver. Valid formats include a single entry,
              for example: Critical Update. Or, you can specify a comma separated list: Critical
              Update,Security Update,Definition Update. NOTE: There cannot be any spaces around
              the commas."
            default: ''
          SeverityLevels:
            type: String
            description: "(Optional) Specify one or more MSRC severity levels associated with
              an update. You can filter severity levels using comma-separated values. By default
              patches for all security levels are selected. If value supplied, the update
              list is filtered by those values. Options: Critical, Important, Low, Moderate
              or Unspecified. Valid formats include a single entry, for example: Critical.
              Or, you can specify a comma separated list: Critical,Important,Low."
            default: ''
          PreUpdateScript:
            type: String
            description: "(Optional) A script provided as a string. It will run prior to installing
              OS updates."
            default: ''
          PostUpdateScript:
            type: String
            description: "(Optional) A script provided as a string. It will run after installing
              OS updates."
            default: ''
        mainSteps:
          - name: LaunchInstance
            action: aws:runInstances
            timeoutSeconds: 1800
            maxAttempts: 3
            onFailure: Abort
            inputs:
              ImageId: "{{ SourceAmiId  }}"
              InstanceType: "{{ InstanceType }}"
              SubnetId: "{{ SubnetId }}"
              MinInstanceCount: 1
              MaxInstanceCount: 1
              IamInstanceProfileName: "{{ IamInstanceProfileName }}"

          # Check the version of Windows. This automation only supports:
          #   - Windows Server 2012 R2 ($osversion.Major -eq 6 -and $osversion.Minor -ge 1)
          #   - Windows Server 2016	($osversion.Major -ge 10)
          # Source: https://docs.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-osversioninfoexa?redirectedfrom=MSDN
          - name: OSCompatibilityCheck
            action: aws:runCommand
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 7200
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - "{{LaunchInstance.InstanceIds}}"
              Parameters:
                executionTimeout: '7200'
                commands:
                  - "[System.Version]$osversion = [System.Environment]::OSVersion.Version"
                  - if(($osversion.Major -eq 6 -and $osversion.Minor -ge 1) -or ($osversion.Major -ge 10)) {
                  - "  Write-Host 'This OS is supported for use with this automation document.'"
                  - "} else {"
                  - "  Write-Host 'This OS is not supported for use with this automation document.'"
                  - "  exit -1"
                  - "}"

          - name: RunPreUpdateScript
            action: aws:runCommand
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 1800
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - "{{ LaunchInstance.InstanceIds }}"
              Parameters:
                commands: "{{ PreUpdateScript }}"

          - name: UpdateSSMAgent
            action: aws:runCommand
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 600
            inputs:
              DocumentName: AWS-UpdateSSMAgent
              InstanceIds:
                - "{{ LaunchInstance.InstanceIds }}"

          - name: UpdateEC2Config
            action: aws:runCommand
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 7200
            inputs:
              DocumentName: AWS-InstallPowerShellModule
              InstanceIds:
                - "{{ LaunchInstance.InstanceIds }}"
              Parameters:
                executionTimeout: '7200'
                source: https://aws-ssm-downloads-{{global:REGION}}.s3.amazonaws.com/PSModules/AWSUpdateWindowsInstance/Latest/AWSUpdateWindowsInstance.zip
                sourceHash: 14CAD416F4A054894EBD2091EA4B99E542368BE5895BDD466B567C1ABA87C87C
                commands:
                  - Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force
                  - Import-Module AWSUpdateWindowsInstance
                  - if ([Environment]::OSVersion.Version.Major -ge 10) {
                  - "  Install-AwsUwiEC2Launch -Id {{ automation:EXECUTION_ID }}"
                  - "} else {"
                  - "  Install-AwsUwiEC2Config -Id {{ automation:EXECUTION_ID }}"
                  - "}"

          - name: UpdateAWSPVDriver
            action: aws:runCommand
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 600
            inputs:
              DocumentName: AWS-ConfigureAWSPackage
              InstanceIds:
                - "{{ LaunchInstance.InstanceIds }}"
              Parameters:
                name: AWSPVDriver
                action: Install

          - name: InstallWindowsUpdates
            action: aws:runCommand
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 14400
            inputs:
              DocumentName: AWS-InstallWindowsUpdates
              InstanceIds:
                - "{{ LaunchInstance.InstanceIds }}"
              Parameters:
                Action: Install
                IncludeKbs: "{{ IncludeKbs }}"
                ExcludeKbs: "{{ ExcludeKbs }}"
                Categories: "{{ Categories }}"
                SeverityLevels: "{{ SeverityLevels }}"

          - name: RunPostUpdateScript
            action: aws:runCommand
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 1800
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - "{{ LaunchInstance.InstanceIds }}"
              Parameters:
                commands: "{{ PostUpdateScript }}"

          - name: RunSysprepGeneralize
            action: aws:runCommand
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 7200
            inputs:
              DocumentName: AWS-InstallPowerShellModule
              InstanceIds:
                - "{{ LaunchInstance.InstanceIds }}"
              Parameters:
                executionTimeout: '7200'
                source: https://aws-ssm-downloads-{{global:REGION}}.s3.amazonaws.com/PSModules/AWSUpdateWindowsInstance/Latest/AWSUpdateWindowsInstance.zip
                sourceHash: 14CAD416F4A054894EBD2091EA4B99E542368BE5895BDD466B567C1ABA87C87C
                commands:
                  - Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force
                  - Import-Module AWSUpdateWindowsInstance
                  - Start-AwsUwiSysprep -Id {{ automation:EXECUTION_ID }}

          - name: StopInstance
            action: aws:changeInstanceState
            maxAttempts: 3
            timeoutSeconds: 7200
            onFailure: Abort
            inputs:
              InstanceIds:
                - "{{ LaunchInstance.InstanceIds }}"
              CheckStateOnly: false
              DesiredState: stopped

          - name: CreateImage
            action: aws:createImage
            maxAttempts: 3
            onFailure: Abort
            inputs:
              InstanceId: "{{ LaunchInstance.InstanceIds }}"
              ImageName: "{{ TargetAmiName }}"
              NoReboot: true
              ImageDescription: Test CreateImage Description

          - name: CreateTags
            action: aws:createTags
            maxAttempts: 3
            onFailure: Abort
            inputs:
              ResourceType: EC2
              ResourceIds:
                - "{{ CreateImage.ImageId }}"
              Tags:
                - Key: cloudrig
                  Value: 'true'
                - Key: cloudrig:amifactory:automation-id
                  Value: "{{automation:EXECUTION_ID}}"
                - Key: cloudrig:amifactory:source-ami
                  Value: "{{SourceAmiId}}"
                - Key: cloudrig:amifactory:has-aws-inspector
                  Value: 'true'
                - Key: cloudrig:amifactory:has-aws-ssm
                  Value: 'true'
          - name: TerminateInstance
            action: aws:changeInstanceState
            maxAttempts: 3
            onFailure: Abort
            inputs:
              InstanceIds:
                - "{{ LaunchInstance.InstanceIds }}"
              DesiredState: terminated
        outputs:
          - CreateImage.ImageId





        schemaVersion: '0.3'
        description: CloudRIG AMI Building automation
        assumeRole: "{{ AutomationAssumeRole }}"
        parameters:
          SourceAmiId:
            type: String
            description: "(Required) The source Amazon Machine Image ID."
            default: "{{ssm:/aws/service/ami-windows-latest/Windows_Server-2016-English-Full-Base}}"
          IamInstanceProfileName:
            type: String
            description: "(Required) The name of the role that enables Systems Manager to
              manage the instance."
            default: !Ref BuildAMIInstanceProfile
          AutomationAssumeRole:
            type: String
            description: "(Required) The ARN of the role that allows Automation to perform
              the actions on your behalf."
            default: !GetAtt BuildAMIAutomationServiceRole.Arn
          TargetAmiName:
            type: String
            description: "(Optional) The name of the new AMI that will be created. Default
              is a system-generated string including the source AMI id, and the creation time
              and date."
            default: !Sub "${ProductName}-{{global:DATE_TIME}}-${InstanceType}"
          InstanceType:
            type: String
            description: "(Optional) Type of instance to launch as the workspace host. Instance
              types vary by region. Default is t2.medium."
            default: g3s.xlarge
          SubnetId:
            type: String
            description: "(Optional) Specify the SubnetId if you want to launch into a specific
              subnet."
            default: ''

        mainSteps:

          - name: LaunchInstance
            action: aws:runInstances
            timeoutSeconds: 1800
            maxAttempts: 3
            onFailure: Abort
            inputs:
              ImageId: "{{ SourceAmiId  }}"
              InstanceType: "{{ InstanceType }}"
              MinInstanceCount: 1
              MaxInstanceCount: 1
              IamInstanceProfileName: "{{ IamInstanceProfileName }}"
              SubnetId: "{{ SubnetId }}"


          - name: RunPreUpdateScript
            action: aws:runCommand
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 1800
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - "{{ LaunchInstance.InstanceIds }}"
              Parameters:
                commands: "{{ PreUpdateScript }}"

          # Update the EC2 Config
          - name: UpdateEC2Config
            action: aws:runCommand
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 7200
            inputs:
              DocumentName: AWS-InstallPowerShellModule
              InstanceIds:
                - "{{ LaunchInstance.InstanceIds }}"
              Parameters:
                executionTimeout: '7200'
                source: https://aws-ssm-downloads-{{global:REGION}}.s3.amazonaws.com/PSModules/AWSUpdateWindowsInstance/Latest/AWSUpdateWindowsInstance.zip
                sourceHash: 14CAD416F4A054894EBD2091EA4B99E542368BE5895BDD466B567C1ABA87C87C
                commands:
                  - Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Force
                  - Import-Module AWSUpdateWindowsInstance
                  - if ([Environment]::OSVersion.Version.Major -ge 10) {
                  - "  Install-AwsUwiEC2Launch -Id {{ automation:EXECUTION_ID }}"
                  - "} else {"
                  - "  Install-AwsUwiEC2Config -Id {{ automation:EXECUTION_ID }}"
                  - "}"

            # Update the SSM Agent (downgrade not allowed)
          - name: UpdateSSMAgent
            action: aws:runCommand
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 600
            inputs:
              DocumentName: AWS-UpdateSSMAgent
              InstanceIds:
                - "{{ LaunchInstance.InstanceIds }}"
              Parameters:
                allowDowngrade: 'false'

          # Upgrade some drivers
          - name: UpdateAWSPVDriver
            action: aws:runCommand
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 600
            inputs:
              DocumentName: AWS-ConfigureAWSPackage
              InstanceIds:
                - "{{LaunchInstance.InstanceIds}}"
              Parameters:
                name: AWSPVDriver
                action: Install

          - name: UpdateAWSEnaNetworkDriver
            action: aws:runCommand
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 600
            inputs:
              DocumentName: AWS-ConfigureAWSPackage
              InstanceIds:
                - "{{LaunchInstance.InstanceIds}}"
              Parameters:
                name: AwsEnaNetworkDriver
                action: Install

          - name: UpdateAWSNVMe
            action: aws:runCommand
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 600
            inputs:
              DocumentName: AWS-ConfigureAWSPackage
              InstanceIds:
                - "{{LaunchInstance.InstanceIds}}"
              Parameters:
                name: AWSNVMe
                action: Install

          # Install the Windows Updates
          - name: InstallWindowsUpdates
            action: aws:runCommand
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 14400
            inputs:
              DocumentName: AWS-InstallWindowsUpdates
              InstanceIds:
                - "{{ LaunchInstance.InstanceIds }}"
              Parameters:
                Action: Install

          # Sysprem the instance
          - name: RunSysprepGeneralize
            action: aws:runCommand
            maxAttempts: 3
            onFailure: Abort
            timeoutSeconds: 600
            inputs:
              DocumentName: AWSEC2-RunSysprep
              InstanceIds:
                - "{{LaunchInstance.InstanceIds}}"
              Parameters:
                Id: "{{automation:EXECUTION_ID}}"

          - name: StopInstance
            action: aws:changeInstanceState
            maxAttempts: 3
            timeoutSeconds: 7200
            onFailure: Abort
            inputs:
              InstanceIds:
                - "{{ LaunchInstance.InstanceIds }}"
              CheckStateOnly: false
              DesiredState: stopped

          - name: CreateImage
            action: aws:createImage
            maxAttempts: 3
            onFailure: Abort
            inputs:
              InstanceId: "{{ LaunchInstance.InstanceIds }}"
              ImageName: "{{ TargetAmiName }}"
              NoReboot: true
              ImageDescription: !Sub "${ProductName} image {{ }}"
          - name: createTagsForImage
            action: aws:createTags
            maxAttempts: 1
            onFailure: Continue
            inputs:
              ResourceType: EC2
              ResourceIds:
                - "{{CreateImage.ImageId}}"
              Tags:
                - Key: Automation-Id
                  Value: "{{automation:EXECUTION_ID}}"
                - Key: cloudrig
                  Value: true
                - Key: SourceAMI
                  Value: "{{SourceAmiId}}"
                - Key: Amazon-Inspector
                  Value: 'true'
                - Key: Amazon-SSM
                  Value: 'true'

          - name: TerminateInstance
            action: aws:changeInstanceState
            maxAttempts: 3
            onFailure: Abort
            inputs:
              InstanceIds:
                - "{{ LaunchInstance.InstanceIds }}"
              DesiredState: terminated

        outputs:
          - CreateImage.ImageId